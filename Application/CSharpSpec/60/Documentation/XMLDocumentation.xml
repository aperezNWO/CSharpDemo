<?xml version="1.0"?>
<!-- To visualize the archive correctly, open it from the url "http://localhost/CSharpSpec/60/Xml/cdcatalog.xml" -->
<?xml-stylesheet type="text/xsl" href="XMLDocumentation.xslt"?>
<doc>
    <assembly>
        <name>CSharp60Spec</name>
    </assembly>
    <members>
        <member name="T:CSharp60Spec.Libraries.Point">
            <summary>Class <c>Point</c> models a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:CSharp60Spec.Libraries.Point.x">
            <summary>Instance variable <c>x</c> represents the point's
            x-coordinate.</summary>
        </member>
        <member name="F:CSharp60Spec.Libraries.Point.y">
            <summary>Instance variable <c>y</c> represents the point's
            y-coordinate.</summary>
        </member>
        <member name="P:CSharp60Spec.Libraries.Point.X">
            <value>Property <c>X</c> represents the point's x-coordinate.</value>
        </member>
        <member name="P:CSharp60Spec.Libraries.Point.Y">
            <value>Property <c>Y</c> represents the point's y-coordinate.</value>
        </member>
        <member name="M:CSharp60Spec.Libraries.Point.#ctor">
            <summary>This constructor initializes the new Point to
            (0,0).</summary>
        </member>
        <member name="M:CSharp60Spec.Libraries.Point.#ctor(System.Int32,System.Int32)">
            <summary>This constructor initializes the new Point to
            (<paramref name="xor"/>,<paramref name="yor"/>).</summary>
            <param><c>xor</c> is the new Point's x-coordinate.</param>
            <param><c>yor</c> is the new Point's y-coordinate.</param>
        </member>
        <member name="M:CSharp60Spec.Libraries.Point.Move(System.Int32,System.Int32)">
            <summary>This method changes the point's location to
            the given coordinates.</summary>
            <param><c>xor</c> is the new x-coordinate.</param>
            <param><c>yor</c> is the new y-coordinate.</param>
            <see cref="M:CSharp60Spec.Libraries.Point.Translate(System.Int32,System.Int32)"/>
        </member>
        <member name="M:CSharp60Spec.Libraries.Point.Translate(System.Int32,System.Int32)">
            <summary>This method changes the point's location by
            the given x- and y-offsets.
            <example>For example:
            <code>
            Point p = new Point(3,5);
            p.Translate(-1,3);
            </code>
            results in <c>p</c>'s having the value (2,8).
            </example>
            </summary>
            <param><c>xor</c> is the relative x-offset.</param>
            <param><c>yor</c> is the relative y-offset.</param>
            <see cref="M:CSharp60Spec.Libraries.Point.Move(System.Int32,System.Int32)"/>
        </member>
        <member name="M:CSharp60Spec.Libraries.Point.Equals(System.Object)">
            <summary>This method determines whether two Points have the same
            location.</summary>
            <param><c>o</c> is the object to be compared to the current object.
            </param>
            <returns>True if the Points have the same location and they have
            the exact same type; otherwise, false.</returns>
            <seealso cref="M:CSharp60Spec.Libraries.Point.op_Equality(CSharp60Spec.Libraries.Point,CSharp60Spec.Libraries.Point)"/>
            <seealso cref="M:CSharp60Spec.Libraries.Point.op_Inequality(CSharp60Spec.Libraries.Point,CSharp60Spec.Libraries.Point)"/>
        </member>
        <member name="M:CSharp60Spec.Libraries.Point.ToString">
            <summary>Report a point's location as a string.</summary>
            <returns>A string representing a point's location, in the form (x,y),
            without any leading, training, or embedded whitespace.</returns>
        </member>
        <member name="M:CSharp60Spec.Libraries.Point.op_Equality(CSharp60Spec.Libraries.Point,CSharp60Spec.Libraries.Point)">
            <summary>This operator determines whether two Points have the same
            location.</summary>
            <param><c>p1</c> is the first Point to be compared.</param>
            <param><c>p2</c> is the second Point to be compared.</param>
            <returns>True if the Points have the same location and they have
            the exact same type; otherwise, false.</returns>
            <seealso cref="M:CSharp60Spec.Libraries.Point.Equals(System.Object)"/>
            <seealso cref="M:CSharp60Spec.Libraries.Point.op_Inequality(CSharp60Spec.Libraries.Point,CSharp60Spec.Libraries.Point)"/>
        </member>
        <member name="M:CSharp60Spec.Libraries.Point.op_Inequality(CSharp60Spec.Libraries.Point,CSharp60Spec.Libraries.Point)">
            <summary>This operator determines whether two Points have the same
            location.</summary>
            <param><c>p1</c> is the first Point to be compared.</param>
            <param><c>p2</c> is the second Point to be compared.</param>
            <returns>True if the Points do not have the same location and the
            exact same type; otherwise, false.</returns>
            <seealso cref="M:CSharp60Spec.Libraries.Point.Equals(System.Object)"/>
            <seealso cref="M:CSharp60Spec.Libraries.Point.op_Equality(CSharp60Spec.Libraries.Point,CSharp60Spec.Libraries.Point)"/>
        </member>
        <member name="M:CSharp60Spec.Libraries.Point.Run">
            <summary>This is the entry point of the Point class testing
            program.
            <para>This program tests each method and operator, and
            is intended to be run after any non-trivial maintenance has
            been performed on the Point class.</para></summary>
        </member>
    </members>
</doc>
