

    .modalStatus-content 
    {
        text-align: center;
        background-color: #fefefe;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 1em;
        border: 1px solid #888;
        width: 100%; /* Could be more or less, depending on screen size */
        color: black;
    }
    /*------------------------------------------------*/
    /* ESTILO PARA LISTADO                            */
    /*------------------------------------------------*/
    #global {
        height: 100px;
        width: 100%;
        border: 1px solid #ddd;
        background: #cccccc;
        color: #0000ff;
        overflow-y: scroll;
    }

    #mensajes {
        height: auto;
    }
    /*------------------------------------------------*/
    /* ESTILO PARA CANVAS                             */
    /*------------------------------------------------*/

    #c {
        width: 250px;
        height: 250px;
        background-color: #fff;
    }
</style>

<div class="main-container">
    <div class="content">
        <div class="content-body">
            <p>@ViewBag.Title</p>
            <p>[BUBBLE SORT           - <a href="javascript: void window.open('https://en.wikipedia.org/wiki/Bubble_sort')">(REFERENCIA)</a>]</p>
            <p>[QUICK  SORT           - <a href="javascript: void window.open('https://en.wikipedia.org/wiki/Quicksort')">(REFERENCIA)</a>]</p>
            <p>[FISHER/YATES SHUFFLE  - <a href="javascript: void window.open('https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle')">(REFERENCIA)</a>]</p>
        </div>
        <hr />
        <p>Listado a Ordenar</p>
        <div id="XmlContent">
            <div id="global">
                <div id="mensajes">
                    @Html.Raw(@ViewBag.Message)
                </div>
            </div>
        </div>
        <hr />
        <div>
            <canvas id="c" width="250px" height="250px"></canvas>
        </div>
        <hr />
        <div>
            <span id="lblstatus"></span>
        </div>
        <hr />
        <div>
            ALGORITMO :
            <select id="SortAlgorithmList">
                <option value="0">[SELECCIONE_OPCION]</option>
                <option value="1">BUBBLE SORT</option>
                <option value="2">QUICK SORT</option>
            </select>
        </div>
        <hr />
        <div>
            <input id="NewSort" type="button" title="[REINICIAR]" value="[REINICIAR]" disabled="disabled"></input>
            |
            <input id="GetSort" type="button" title="[ORDENAR]" value="[ORDENAR]"></input>
            <hr />
            Ver Código Fuente : [<a href="javascript:void window.open('../Source/_SortBenchMarkDemo_html.txt');" class="DownloadSourceCode">HTML</a>] [<a href="javascript:void window.open('../Source/_SortBenchMarkDemo_cs.txt');">CS</a>]
        </div>
        <hr />
        <a>@Html.ActionLink("Volver al Menú", "_Demos", "Demos")</a>
        <!-- INICIO VENTANA MODAL TRANSCURSO OPERACION -->
        <div id="statusWindow" class="modalStatus" style="display:none">
            <div class="modalStatus-content">
                ... Procesando ...
            </div>
        </div>
        <!-- FIN VENTANA MODAL TRANSCURSO DE OPERACION -->
    </div>
</div>

<script type="text/javascript">
    //------------------------------------------------------------------------------------------------
    // DECLARACION DE VARIABLES
    //------------------------------------------------------------------------------------------------
    var rectSize            = 10;
    var screenSize          = 250;
    var c_canvas            = document.getElementById("c");
    var context             = c_canvas.getContext("2d");
    var delayInMilliseconds = 1000;
    var stringMatrix        = "";
    var indexDraw           = 0;
    var sortedArrayDecoded  = "";
    //
    function DrawGrid()
    {
        //
        context.clearRect(0, 0, c_canvas.width, c_canvas.height);
        //
        for (var x = 0.5; x < 501; x += rectSize) {
            context.moveTo(x, 0);
            context.lineTo(x, 381);
        }
        //
        for (var y = 0.5; y < 381; y += rectSize) {
            context.moveTo(0, y);
            context.lineTo(500, y);
        }
        //
        context.strokeStyle = "#cccccc";
        context.stroke();
        //
    }
    //
    function DrawRectangles(stringArray)
    {
        //
        context.fillStyle = "#ccc";
        //
        for (var index = 0; index < 25; index++)
        {
            //
            var x      = 0 + (rectSize * index);
            var y      = screenSize - (stringArray[index] * rectSize);
            var length = (rectSize);
            var height = stringArray[index] * rectSize;
            //
            context.fillRect(x, y, length, height);
        }
        //
    }
    //
    function DrawStep()
    {
        //
        console.log('SORT_BENCHMARK . DRAWING ARRAY : ' + indexDraw);
        //
        if (indexDraw >= stringMatrix.length)
        {
            //
            console.log('SORT_BENCHMARK . SORTED ARRAY : ' + sortedArrayDecoded);
            //
            $('#mensajes').html(sortedArrayDecoded);
            //
            alert('SE ORDENO CORRECTAMENTE EL LISTADO');
            //
            return;
        }
        //
        if ((stringMatrix[indexDraw] == null) || (stringMatrix[indexDraw] != ''))
        {
            //
            $('#lblstatus').text(' Paso ' + (indexDraw) + ' de ' + (stringMatrix.length-1));
            //
            var stringArray = stringMatrix[indexDraw];
            //
            var numberArray = stringArray.split(",");
            //
            console.log('NUMBER ARRAY : ' + numberArray);
            //
            DrawGrid();
            //
            DrawRectangles(numberArray);
            //
        }
        //
        indexDraw++;
        //
        setTimeout(DrawStep,500);
    };
    //
    function DrawStepMain()
    {
        //
        indexDraw = 0;
        //
        console.log('SORT_BENCHMARK . DRAWING ARRAY INITIAL. index: ' + indexDraw + ',matrix length : : ' + stringMatrix.length);
        //
        DrawStep();
        //
    }
    //
    function _ShowProgressBar()
    {
        //
        var modal           = document.getElementById("statusWindow");
        modal.style.display = "block";
        //
        console.log('status window show');
        //
    }
    //
    function _HideProgressBar()
    {
        //
        var modal           = document.getElementById("statusWindow");
        modal.style.display = "none";
        modal.style.display = "hidden";
        //
        console.log('status window hide');
        //
    }
    //
    function DebugHostingContent(msg)
    {
        //
        msg = msg.substring(0, 68);
        //
        return msg;
    }
    //
    function _ResetControls()
    {
        //
        var stringArray = $('#mensajes').html().split("<br>");
        //
        console.log('ARREGLO : ' + stringArray);
        //
        $('#SortAlgorithmList').val('0');
        //
        $('#SortAlgorithmList').prop('disabled', false);
        //
        $("#GetSort").prop('disabled', false);
        //
        $("#NewSort").prop('disabled', true);
        //
        DrawGrid();
        //
        DrawRectangles(stringArray);
        //
        $('#lblstatus').text('[STATUS]');
        //
    }
    //
    $(document).ready(function ()
    {
        //
        console.log("LOADING PAGE SORT BENCHMARK DEMO");
        //
        _ResetControls();
        //
    });
    //
    $("#GetSort").click(function ()
    {
        try
        {
            //
            var sortAlgoritm = $('#SortAlgorithmList').val();
            //
            if (sortAlgoritm == '0')
            {
                //
                alert('FAVOR SELECCIONE UN ALGORITMO');
                //
                return;
            }
            //
            var p_url = "_GetSort";
            //
            $.ajax(
                {
                    url: p_url,
                    data:
                    {
                        p_sortAlgoritm: sortAlgoritm
                    }
                })
                .done(function (data)
                {
                    //
                    console.log('SORT_BENCHMARK . GET SORT : ' + data);
                    //
                    //-----------------------------------------------------------------------
                    // CORREGIR DATOS DE MATRIZ PARA VISUALIZAR EN CANVAS
                    //-----------------------------------------------------------------------
                    //
                    stringMatrix = data.split("■");
                    //
                    for (var index = 0; index < stringMatrix.length; index++)
                    {
                        //
                        stringMatrix[index] = stringMatrix[index].replace("<br/>", "");
                        stringMatrix[index] = stringMatrix[index].replace("■"    , "");
                        //
                    }
                    //
                    sortedArrayDecoded = stringMatrix[stringMatrix.length - 1]
                    //
                    for (var index = 0; index < stringMatrix.length; index++)
                    {
                        //
                        while (stringMatrix[index].indexOf("<br/>") != -1)
                        {
                            //
                            stringMatrix[index] = stringMatrix[index].replace("<br/>", ",");
                        }
                        //
                        console.log('SORT_BENCHMARK . SORTED ARRAY : ' + index + ' : ' + stringMatrix[index]);
                    }
                    //-----------------------------------------------------------------------
                    // REINICIAR CONTROLES
                    //-----------------------------------------------------------------------
                    //
                    $('#SortAlgorithmList').prop('disabled', true);
                    //
                    $("#GetSort").prop('disabled', true);
                    //
                    $("#NewSort").prop('disabled', false);
                    //-----------------------------------------------------------------------
                    // DIBUJAR CUADRICULA
                    //-----------------------------------------------------------------------
                    //
                    DrawStepMain();
                    //
                    return true;
                    //
                }).fail(function (jqXHR, textStatus, errorThrown)
                {
                    //
                    _HideProgressBar();
                    //
                    console.log('ERROR EN GENERACION DE GRAFO : ' + textStatus);
                    //
                    console.log('ERROR EN GENERACION DE GRAFO : ' + errorThrown);
                    //
                    alert("ERROR EN GENERACÍON DE GRAFO");
                    //
                    return false;
                });
        }
        catch (error)
        {
            //
            alert("ERROR EN PROCEDIMIENTO");
            //
            console.error(error);
            //
            return false;
        }
        //
    });
    //
    $("#NewSort").click(function ()
    {
        try
        {
            //
            _ShowProgressBar();
            //
            var p_url = "_NewSort";
            //
            $.ajax(
                {
                    url: p_url
                })
                .done(function (msg)
                {
                    //
                    console.log('SORT_BENCHMARK . NEW SORT : ' + msg);
                    //
                    _HideProgressBar();
                    //
                    $('#mensajes').html(msg);
                    //
                    _ResetControls();
                    //
                    alert('REINICIO EXITOSO');
                    //
                    return true;
                })
                .fail(function (jqXHR, textStatus, errorThrown)
                {
                    //
                    _HideProgressBar();
                    //
                    console.log('ERROR EN GENERACION DE GRAFO : ' + textStatus);
                    //
                    console.log('ERROR EN GENERACION DE GRAFO : ' + errorThrown);
                    //
                    alert("ERROR EN GENERACÍON DE GRAFO");
                    //
                    return false;
                });
        }
        catch (error)
        {
            //
            alert("ERROR EN ARCHIVO ZIP");
            //
            console.error(error);
            //
            return false;
        }
        //
    });
    //
</script>