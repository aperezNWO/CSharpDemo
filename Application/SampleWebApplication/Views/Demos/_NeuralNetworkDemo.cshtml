@{
    ViewBag.Title = @"[NEURAL NETWORK DEMO]";
}

<style>
    /*------------------------------------------------*/
    /* ESTILOS STATUS DE OPERACION                    */
    /*------------------------------------------------*/
    .modalStatus {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 99; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    .modalStatus-content {
        text-align: center;
        background-color: #fefefe;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 1em;
        border: 1px solid #888;
        width: 100%; /* Could be more or less, depending on screen size */
        color: black;
    }

</style>

<div class="main-container">
    <div class="content">
        <div class="content-body">
            <p>@ViewBag.Title</p>
            <p>[<a href="javascript: void window.open('#');">(REFERENCIA)</a>]</p>
        </div>
        <hr />
        <div id="signature"></div>
        <hr />
        <div>
            [SOME_FUNCTIONALITY_HERE]
        </div>
        <hr />
        <div>
            <input id="NewData" type="button" title="[REINICIAR]" value="[REINICIAR]" disabled="disabled"></input>
            |
            <input id="SetData" type="button" title="[GENERAR]" value="[GENERAR]"></input>
        </div>
        <hr />
        <a href="../Demos/_DemosIndex?lang=2">Volver al Menú</a>
        <!-- INICIO VENTANA MODAL TRANSCURSO OPERACION -->
        <div id="statusWindow" class="modalStatus" style="display:none">
            <div class="modalStatus-content">
                ... Procesando ...
            </div>
        </div>
        <!-- FIN VENTANA MODAL TRANSCURSO DE OPERACION -->
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        //
        var $sigdiv = $("#signature");

        // inits the jSignature widget.
        $sigdiv.jSignature({
            width: '100%',
            height: '240px'
        });

        // after some doodling...
        $sigdiv.jSignature("reset"); // clears the canvas and rerenders the decor on it.

        // Getting signature as SVG and rendering the SVG within the browser.
        // (!!! inline SVG rendering from IMG element does not work in all browsers !!!)
        // this export plugin returns an array of [mimetype, base64-encoded string of SVG of the signature strokes]
        /*
        var datapair = $sigdiv.jSignature("getData", "svgbase64");
        var i  = new Image();
        i.src  = "data:" + datapair[0] + "," + datapair[1] ;
        $(i).appendTo($("#someelement")); // append the image (SVG) to DOM.

        // Getting signature as "base30" data pair
        // array of [mimetype, string of jSIgnature"s custom Base30-compressed format]
        datapair = $sigdiv.jSignature("getData","base30")
        // reimporting the data into jSignature.
        // import plugins understand data-url-formatted strings like "data:mime;encoding,data"
        $sigdiv.jSignature("setData", "data:" + datapair.join(","))
        */
    });
</script>